/*
 * This source file was generated by the Gradle 'init' task
 */
package bitcamp.myapp;

// 08. 기능 단위로 명령문 묶기 : 메서드 사용법

import java.util.Scanner;
import java.util.InputMismatchException;

public class App {
    // 키보드 입력 함수 생성하기
    static Scanner keyboardScanner = new Scanner(System.in);

    static String[] menus = {
            "회원",
            "팀",
            "프로젝트",
            "게시판",
            "도움말",
            "종료"
    };

    public static void main(String[] args) {

        printMenu();

        String command;

        while (true) {
            try {
                command = prompt();

                if (command.equals("menu")) {
                    printMenu();
                } else {
                    int menuNo = Integer.parseInt(command);
                    String menuTitle = getMenuTitle(menuNo); // 요기 놓침.

                    if (menuTitle == null) {
                        System.out.println("유효한 메뉴 번호가 아닙니다.");
                    } else if (menuTitle.equals("종료")) {
                        break;
                    } else {
                        System.out.println(menuTitle);
                    }
                }

            } catch (NumberFormatException e) {
                System.out.println("숫자로 메뉴 번호를 입력하세요.");
            }

        }

        System.out.println("종료합니다.");
        keyboardScanner.close();
    }

    // menu 출력 메서드
    static void printMenu() {
        String boldAnsi = "\033[1m";
        String redAnsi = "\033[31m";
        String resetAnsi = "\033[0m";
        String line = "---------------------------------------";
        String title = "[팀 프로젝트 관리 시스템]";

        System.out.println(boldAnsi + line + resetAnsi);
        System.out.println(boldAnsi + title + resetAnsi);

        for (int i = 0; i < menus.length; i++) {
            if (menus[i].equals("종료")) {
                System.out.printf("%s%d. %s%s\n", (boldAnsi + redAnsi), (i + 1), menus[i], resetAnsi);
            } else {
                System.out.printf("%d. %s\n", (i + 1), menus[i]);
            }
        }

        System.out.println(boldAnsi + line + resetAnsi);
    }

    // 입력받는 메서드
    static String prompt() {
        System.out.print("> ");
        return keyboardScanner.nextLine();
    }

    // 메뉴 번호의 유효성 검증 메서드
    static boolean isValidateMenu(int menuNo) {
        return menuNo >= 1 && menuNo <= menus.length;
    }

    // 메뉴 타이틀을 알아내는 메서드
    static String getMenuTitle(int menuNo) {
        // 삼항연산자로 줄여서 작성.
        return isValidateMenu(menuNo) ? menus[menuNo - 1] : null;
    }
}
